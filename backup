open Ast
open Parser
open Lexer
open Tokens

let print_position lexbuf =
  let pos = lexbuf.Lexing.lex_curr_p in
  Printf.sprintf "Line %d, Column %d" pos.pos_lnum (pos.pos_cnum - pos.pos_bol)

let parse_with_error lexbuf =
  try Parser.main Lexer.tokenize lexbuf  with
  | Parsing.Parse_error ->
      failwith (Printf.sprintf "Syntax error at %s" (print_position lexbuf))
  | Error msg ->
      failwith (Printf.sprintf "Lexical error: %s at %s" msg (print_position lexbuf))
      
let rec process_ast ast =
  Printf.printf "process_ast called\n"; (* Debug statement *)
  match ast with
  | Main stmts -> process_ast stmts
  | Statement_list lst -> List.iter process_ast lst
  | LineStatement stmt -> process_ast stmt
  | BlockStatement blk -> process_ast blk
  | Comment -> ()  (* Handle comments if needed *)
  | IntConst n -> Printf.printf "Integer: %d\n" n
  | FloatConst f -> Printf.printf "Float: %f\n" f
  | BoolConst b -> Printf.printf "Boolean: %b\n" b
  | Lookup var -> Printf.printf "Variable lookup: %s\n" var
  | x -> Printf.printf "Unhandled case: %s\n" (Obj.magic x : string) 

let () =
  try
    let lexbuf = 
      if Array.length Sys.argv > 1 then
        let channel = open_in Sys.argv.(1) in
        Lexing.from_channel channel
      else
        Lexing.from_channel stdin
    in
    
    let ast = parse_with_error lexbuf in
    match ast with
    | Main Statement_list [] -> print_endline "Empty program"
    | _ ->
        print_endline "Parsing successful! AST structure:";
        process_ast ast;
        print_endline "\nExecution completed"

  with
  | Failure msg ->
      prerr_endline ("Error: " ^ msg);
      exit 1
  | End_of_file ->
      prerr_endline "Unexpected end of input";
      exit 1
  | Sys_error msg ->
      prerr_endline ("File error: " ^ msg);
      exit 1
